// previous code
 gloabl state
 console.log(store.getState());
 store.subscribe(() => {
   history.push(store.getState());
   console.log(history);
 });

if (action.type === inc) {
    // immutability --- state should not be changed directly
  }
  if (action.type === dec) {
    return { amount: state.amount - 1 };
  }
  if (action.type === incByAmt) {
    return { amount: state.amount + action.payload };
  }
  return state;

// What is a middleware?
what is a middleware javascript
ChatGPT
In the context of web development, a middleware in JavaScript typically refers to a function or a series of functions that intercepts requests or responses in a web application's request-response cycle. Middleware functions have access to the request and response objects and can perform tasks like modifying request or response data, executing additional logic, or terminating the request-response cycle.

In frameworks like Express.js, which is a popular web application framework for Node.js, middleware functions are used extensively. These middleware functions are executed sequentially in the order they are defined in the code, and they can perform tasks such as logging, authentication, authorization, error handling, and more.

Middleware functions in Express.js are typically defined using the app.use() method, where you specify the middleware function you want to use. For example:

javascript
Copy code
const express = require('express');
const app = express();

// Example middleware function
app.use((req, res, next) => {
  console.log('Middleware executed!');
  next(); // Call the next middleware in the chain
});

// Route handler
app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
In this example, the middleware function logs a message to the console every time a request is made to the server. It then calls the next() function to pass control to the next middleware function in the chain. If next() is not called within a middleware function, the request-response cycle can be terminated prematurely.

